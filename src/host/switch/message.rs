// Definitions were generated by prost_build

pub use offer::protocol::Protocol as OfferProtocol;
pub use r#use::Protocol as UseProtocol;

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Offer {
    #[prost(message, repeated, tag = "1")]
    pub protocols: Vec<offer::Protocol>,
}

impl Offer {
    pub fn with_names(proto_names: Vec<String>) -> Offer {
        let sealed = proto_names
            .into_iter()
            .map(offer::Protocol::with_name)
            .collect::<Vec<_>>();

        Offer { protocols: sealed }
    }

    pub fn into_protocols(self) -> Vec<OfferProtocol> {
        self.protocols
            .into_iter()
            .filter(|proto| proto.protocol.is_some())
            .map(|proto| proto.protocol.expect("impossible, already filtered None"))
            .collect()
    }
}

pub mod offer {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Protocol {
        #[prost(oneof = "protocol::Protocol", tags = "1, 2")]
        pub protocol: Option<protocol::Protocol>,
    }

    impl Protocol {
        pub fn with_name(name: String) -> Self {
            Protocol {
                protocol: Some(protocol::Protocol::Name(name)),
            }
        }

        pub fn with_id(id: u64) -> Self {
            Protocol {
                protocol: Some(protocol::Protocol::Id(id)),
            }
        }
    }

    pub mod protocol {
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Protocol {
            #[prost(string, tag = "1")]
            Name(String),
            #[prost(uint64, tag = "2")]
            Id(u64),
        }
    }
}

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Use {
    #[prost(message, optional, tag = "1")]
    pub protocol: Option<r#use::Protocol>,
}

impl Use {
    pub fn new(proto_id: u64, proto_name: String) -> Self {
        let protocol = r#use::Protocol {
            id: proto_id,
            name: proto_name,
        };

        Use {
            protocol: Some(protocol),
        }
    }
}

pub mod r#use {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Protocol {
        #[prost(uint64, tag = "1")]
        pub id: u64,
        #[prost(string, tag = "2")]
        pub name: String,
    }
}
